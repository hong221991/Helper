package com.hyc.helper.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hyc.helper.helper.ListStringConverter;
import java.util.List;

import com.hyc.helper.bean.StatementInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STATEMENT_INFO_BEAN".
*/
public class StatementInfoBeanDao extends AbstractDao<StatementInfoBean, Void> {

    public static final String TABLENAME = "STATEMENT_INFO_BEAN";

    /**
     * Properties of entity StatementInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Created_on = new Property(3, String.class, "created_on", false, "CREATED_ON");
        public final static Property Is_top = new Property(4, String.class, "is_top", false, "IS_TOP");
        public final static Property Likes = new Property(5, String.class, "likes", false, "LIKES");
        public final static Property View_cnt = new Property(6, String.class, "view_cnt", false, "VIEW_CNT");
        public final static Property Username = new Property(7, String.class, "username", false, "USERNAME");
        public final static Property Bio = new Property(8, String.class, "bio", false, "BIO");
        public final static Property Dep_name = new Property(9, String.class, "dep_name", false, "DEP_NAME");
        public final static Property Head_pic = new Property(10, String.class, "head_pic", false, "HEAD_PIC");
        public final static Property Head_pic_thumb = new Property(11, String.class, "head_pic_thumb", false, "HEAD_PIC_THUMB");
        public final static Property Is_like = new Property(12, boolean.class, "is_like", false, "IS_LIKE");
        public final static Property Pics = new Property(13, String.class, "pics", false, "PICS");
    }

    private final ListStringConverter picsConverter = new ListStringConverter();

    public StatementInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StatementInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STATEMENT_INFO_BEAN\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"CONTENT\" TEXT," + // 2: content
                "\"CREATED_ON\" TEXT," + // 3: created_on
                "\"IS_TOP\" TEXT," + // 4: is_top
                "\"LIKES\" TEXT," + // 5: likes
                "\"VIEW_CNT\" TEXT," + // 6: view_cnt
                "\"USERNAME\" TEXT," + // 7: username
                "\"BIO\" TEXT," + // 8: bio
                "\"DEP_NAME\" TEXT," + // 9: dep_name
                "\"HEAD_PIC\" TEXT," + // 10: head_pic
                "\"HEAD_PIC_THUMB\" TEXT," + // 11: head_pic_thumb
                "\"IS_LIKE\" INTEGER NOT NULL ," + // 12: is_like
                "\"PICS\" TEXT);"); // 13: pics
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STATEMENT_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StatementInfoBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String created_on = entity.getCreated_on();
        if (created_on != null) {
            stmt.bindString(4, created_on);
        }
 
        String is_top = entity.getIs_top();
        if (is_top != null) {
            stmt.bindString(5, is_top);
        }
 
        String likes = entity.getLikes();
        if (likes != null) {
            stmt.bindString(6, likes);
        }
 
        String view_cnt = entity.getView_cnt();
        if (view_cnt != null) {
            stmt.bindString(7, view_cnt);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(8, username);
        }
 
        String bio = entity.getBio();
        if (bio != null) {
            stmt.bindString(9, bio);
        }
 
        String dep_name = entity.getDep_name();
        if (dep_name != null) {
            stmt.bindString(10, dep_name);
        }
 
        String head_pic = entity.getHead_pic();
        if (head_pic != null) {
            stmt.bindString(11, head_pic);
        }
 
        String head_pic_thumb = entity.getHead_pic_thumb();
        if (head_pic_thumb != null) {
            stmt.bindString(12, head_pic_thumb);
        }
        stmt.bindLong(13, entity.getIs_like() ? 1L: 0L);
 
        List pics = entity.getPics();
        if (pics != null) {
            stmt.bindString(14, picsConverter.convertToDatabaseValue(pics));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StatementInfoBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String created_on = entity.getCreated_on();
        if (created_on != null) {
            stmt.bindString(4, created_on);
        }
 
        String is_top = entity.getIs_top();
        if (is_top != null) {
            stmt.bindString(5, is_top);
        }
 
        String likes = entity.getLikes();
        if (likes != null) {
            stmt.bindString(6, likes);
        }
 
        String view_cnt = entity.getView_cnt();
        if (view_cnt != null) {
            stmt.bindString(7, view_cnt);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(8, username);
        }
 
        String bio = entity.getBio();
        if (bio != null) {
            stmt.bindString(9, bio);
        }
 
        String dep_name = entity.getDep_name();
        if (dep_name != null) {
            stmt.bindString(10, dep_name);
        }
 
        String head_pic = entity.getHead_pic();
        if (head_pic != null) {
            stmt.bindString(11, head_pic);
        }
 
        String head_pic_thumb = entity.getHead_pic_thumb();
        if (head_pic_thumb != null) {
            stmt.bindString(12, head_pic_thumb);
        }
        stmt.bindLong(13, entity.getIs_like() ? 1L: 0L);
 
        List pics = entity.getPics();
        if (pics != null) {
            stmt.bindString(14, picsConverter.convertToDatabaseValue(pics));
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public StatementInfoBean readEntity(Cursor cursor, int offset) {
        StatementInfoBean entity = new StatementInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // created_on
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // is_top
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // likes
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // view_cnt
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // username
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // bio
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // dep_name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // head_pic
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // head_pic_thumb
            cursor.getShort(offset + 12) != 0, // is_like
            cursor.isNull(offset + 13) ? null : picsConverter.convertToEntityProperty(cursor.getString(offset + 13)) // pics
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StatementInfoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreated_on(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIs_top(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLikes(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setView_cnt(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUsername(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBio(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDep_name(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHead_pic(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHead_pic_thumb(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIs_like(cursor.getShort(offset + 12) != 0);
        entity.setPics(cursor.isNull(offset + 13) ? null : picsConverter.convertToEntityProperty(cursor.getString(offset + 13)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(StatementInfoBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(StatementInfoBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(StatementInfoBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
