package com.hyc.helper.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hyc.helper.bean.WebUrlBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEB_URL_BEAN".
*/
public class WebUrlBeanDao extends AbstractDao<WebUrlBean, String> {

    public static final String TABLENAME = "WEB_URL_BEAN";

    /**
     * Properties of entity WebUrlBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "title", false, "TITLE");
        public final static Property Url = new Property(1, String.class, "url", true, "URL");
        public final static Property CollectTime = new Property(2, long.class, "collectTime", false, "COLLECT_TIME");
    }


    public WebUrlBeanDao(DaoConfig config) {
        super(config);
    }
    
    public WebUrlBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEB_URL_BEAN\" (" + //
                "\"TITLE\" TEXT," + // 0: title
                "\"URL\" TEXT PRIMARY KEY NOT NULL ," + // 1: url
                "\"COLLECT_TIME\" INTEGER NOT NULL );"); // 2: collectTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEB_URL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WebUrlBean entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
        stmt.bindLong(3, entity.getCollectTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WebUrlBean entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
        stmt.bindLong(3, entity.getCollectTime());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public WebUrlBean readEntity(Cursor cursor, int offset) {
        WebUrlBean entity = new WebUrlBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // title
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.getLong(offset + 2) // collectTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WebUrlBean entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCollectTime(cursor.getLong(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(WebUrlBean entity, long rowId) {
        return entity.getUrl();
    }
    
    @Override
    public String getKey(WebUrlBean entity) {
        if(entity != null) {
            return entity.getUrl();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WebUrlBean entity) {
        return entity.getUrl() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
