package com.hyc.helper.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hyc.helper.bean.ImageMessageRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_MESSAGE_RECORD".
*/
public class ImageMessageRecordDao extends AbstractDao<ImageMessageRecord, String> {

    public static final String TABLENAME = "IMAGE_MESSAGE_RECORD";

    /**
     * Properties of entity ImageMessageRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OriginalPath = new Property(0, String.class, "originalPath", true, "ORIGINAL_PATH");
        public final static Property CompressPath = new Property(1, String.class, "compressPath", false, "COMPRESS_PATH");
        public final static Property CloudPath = new Property(2, String.class, "cloudPath", false, "CLOUD_PATH");
    }


    public ImageMessageRecordDao(DaoConfig config) {
        super(config);
    }
    
    public ImageMessageRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_MESSAGE_RECORD\" (" + //
                "\"ORIGINAL_PATH\" TEXT PRIMARY KEY NOT NULL ," + // 0: originalPath
                "\"COMPRESS_PATH\" TEXT," + // 1: compressPath
                "\"CLOUD_PATH\" TEXT);"); // 2: cloudPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_MESSAGE_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImageMessageRecord entity) {
        stmt.clearBindings();
 
        String originalPath = entity.getOriginalPath();
        if (originalPath != null) {
            stmt.bindString(1, originalPath);
        }
 
        String compressPath = entity.getCompressPath();
        if (compressPath != null) {
            stmt.bindString(2, compressPath);
        }
 
        String cloudPath = entity.getCloudPath();
        if (cloudPath != null) {
            stmt.bindString(3, cloudPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImageMessageRecord entity) {
        stmt.clearBindings();
 
        String originalPath = entity.getOriginalPath();
        if (originalPath != null) {
            stmt.bindString(1, originalPath);
        }
 
        String compressPath = entity.getCompressPath();
        if (compressPath != null) {
            stmt.bindString(2, compressPath);
        }
 
        String cloudPath = entity.getCloudPath();
        if (cloudPath != null) {
            stmt.bindString(3, cloudPath);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ImageMessageRecord readEntity(Cursor cursor, int offset) {
        ImageMessageRecord entity = new ImageMessageRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // originalPath
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // compressPath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // cloudPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImageMessageRecord entity, int offset) {
        entity.setOriginalPath(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCompressPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCloudPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ImageMessageRecord entity, long rowId) {
        return entity.getOriginalPath();
    }
    
    @Override
    public String getKey(ImageMessageRecord entity) {
        if(entity != null) {
            return entity.getOriginalPath();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ImageMessageRecord entity) {
        return entity.getOriginalPath() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
