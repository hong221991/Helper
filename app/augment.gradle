ext.PACKAGE_NAME = "com.hyc.helper"
ext.LAUNCH_ACTIVITY = "com.hyc.helper.activity.SplashActivity"

tasks.all {
  task ->
    if (task.name.startsWith("assemble") && task.name.endsWith("Release")) {
      doLast {
        processRelease()
      }
    } else if (task.name.startsWith("assemble") && task.name.endsWith("Debug")) {
      doLast {
        processDebug()
      }
    }
}

android {
  applicationVariants.all { variant ->
    if ("release".equalsIgnoreCase(variant.getBuildType().name)
        && variant.getBuildType().isMinifyEnabled()) {
      variant.assemble.doLast {
        def mappingPath = project.getProjectDir().path + "/release"
        copy {
          from variant.mappingFile
          into mappingPath
        }
      }
    }
  }
}

def processRelease() {
  moveApkFile()
  if ((Boolean) getLocalProperties("RELEASE_INSTALL", false)) {
    restart(false)
  }
}

def moveApkFile() {
  def apkFile = new File(
      rootProject.getRootDir().absolutePath + "/app/build/outputs/apk/Helper/release/app-Helper-release.apk")
  def targetFile = new File(rootProject.getRootDir().absolutePath + "/app/release/app-release.apk")

  if (apkFile.exists()) {
    if (targetFile.exists() && targetFile.delete()) {
      println("删除原有的apk文件")
    }
  }
  project.getAnt().copy(tofile: targetFile) {
    fileset(file: apkFile)
  }
  println("替换release apk成功")
}

def processDebug() {
  restart(true)
}

def restart(boolean isDebug) {
  println("install ${isDebug ? "debug" : "release"} apk")
  def apkPath = isDebug ? "/app/build/outputs/apk/Helper/debug/app-Helper-debug.apk" :
      "/app/release/app-release.apk"
  apkPath = transferPath(project.getRootDir().absolutePath + apkPath)
  def installCommand = "adb install $apkPath"
  exec {
    try {
      executable 'bash'
      args "-c", "$installCommand"
    } catch (Exception e) {
      e.printStackTrace()
      installCommand = "adb install -t $apkPath"
      try {
        executable 'bash'
        args "-c", "$installCommand"
      } catch (Exception e1) {
        e1.printStackTrace()
        println("=====================install failed with exception.=========================")
        return
      }
    }
  }

  def command = "adb shell am force-stop $PACKAGE_NAME ; adb shell am start -n $PACKAGE_NAME/$LAUNCH_ACTIVITY"
  exec {
    try {
      executable 'bash'
      args "-c", "$command"
    } catch (Exception e) {
      e.printStackTrace()
      println("=====================restart failed with exception.=========================")
    }
  }
  println("=====================restart successfull.=========================")
}

static def transferPath(String path) {
  def file = new File(path)
  if (file.separator == "\\") {
    path = path.replace("\\", "/")
    path = path.replace(":", "")
    path = "/" + path
  }
  return path
}

def getLocalProperties(String key, Object defValue) {
  try {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def value = properties.getProperty(key)
    return value
  } catch (Exception e) {
    e.printStackTrace()
  }
  return defValue
}